{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-calculator/tests/acceptance/calculator-test.js","ember-calculator/tests/integration/components/action-button-test.js","ember-calculator/tests/integration/components/number-button-test.js","ember-calculator/tests/lint/app.lint-test.js","ember-calculator/tests/lint/templates.template.lint-test.js","ember-calculator/tests/lint/tests.lint-test.js","ember-calculator/tests/test-helper.js","ember-calculator/tests/unit/adapters/application-test.js","ember-calculator/tests/unit/controllers/calculator-test.js","ember-calculator/tests/unit/models/calculator-test.js","ember-calculator/tests/unit/models/theme-test.js","ember-calculator/tests/unit/routes/calculator-test.js","ember-calculator/tests/unit/routes/index-test.js","ember-calculator/tests/unit/routes/theme-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"ember-calculator/tests/acceptance/calculator-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Acceptance | add numbers', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)('should add provided numbers', async function (assert) {});\n    (0, _qunit.test)('should multiple provided numbers', async function (assert) {});\n    (0, _qunit.test)('should subtract provided numbers', async function (assert) {});\n    (0, _qunit.test)('should divide provided numbers', async function (assert) {});\n    (0, _qunit.test)('should update theme settings', async function (assert) {});\n  });\n});","define(\"ember-calculator/tests/integration/components/action-button-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | action-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"IRsM2CxC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"action-button\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"Et+5xL0+\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"action-button\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"ember-calculator/tests/integration/components/number-button-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  (0, _qunit.module)('Integration | Component | number-button', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"YZo9HPQH\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[5,\\\"number-button\\\",[],[[],[]]]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), ''); // Template block usage:\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QVRl847A\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n      \\\"],[5,\\\"number-button\\\",[],[[],[]],{\\\"statements\\\":[[0,\\\"\\\\n        template block text\\\\n      \\\"]],\\\"parameters\\\":[]}],[0,\\\"\\\\n    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define(\"ember-calculator/tests/lint/app.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | app');\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/action-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/action-button.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('components/number-button.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-button.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('controllers/calculator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/calculator.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/calculator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/calculator.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('models/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/theme.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/calculator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/calculator.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('routes/theme.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/theme.js should pass ESLint\\n\\n');\n  });\n});","define(\"ember-calculator/tests/lint/templates.template.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('TemplateLint');\n  QUnit.test('ember-calculator/templates/application.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/application.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-calculator/templates/calculator.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/calculator.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-calculator/templates/components/action-button.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/components/action-button.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-calculator/templates/components/number-button.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/components/number-button.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-calculator/templates/index.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/index.hbs should pass TemplateLint.\\n\\n');\n  });\n  QUnit.test('ember-calculator/templates/theme.hbs', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-calculator/templates/theme.hbs should pass TemplateLint.\\n\\n');\n  });\n});","define(\"ember-calculator/tests/lint/tests.lint-test\", [], function () {\n  \"use strict\";\n\n  QUnit.module('ESLint | tests');\n  QUnit.test('acceptance/calculator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'acceptance/calculator-test.js should pass ESLint\\n\\n2:10 - \\'visit\\' is defined but never used. (no-unused-vars)\\n2:17 - \\'currentURL\\' is defined but never used. (no-unused-vars)\\n2:29 - \\'click\\' is defined but never used. (no-unused-vars)\\n8:57 - \\'assert\\' is defined but never used. (no-unused-vars)\\n11:62 - \\'assert\\' is defined but never used. (no-unused-vars)\\n14:62 - \\'assert\\' is defined but never used. (no-unused-vars)\\n17:60 - \\'assert\\' is defined but never used. (no-unused-vars)\\n20:58 - \\'assert\\' is defined but never used. (no-unused-vars)');\n  });\n  QUnit.test('integration/components/action-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/action-button-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('integration/components/number-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/number-button-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/controllers/calculator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/calculator-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/calculator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/calculator-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/models/theme-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/theme-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/calculator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/calculator-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n  QUnit.test('unit/routes/theme-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/theme-test.js should pass ESLint\\n\\n');\n  });\n});","define(\"ember-calculator/tests/test-helper\", [\"ember-calculator/app\", \"ember-calculator/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define(\"ember-calculator/tests/unit/adapters/application-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/controllers/calculator-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Controller | calculator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:calculator');\n      assert.ok(controller);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/models/calculator-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | calculator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('calculator', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/models/theme-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Model | theme', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks); // Replace this with your real tests.\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = store.createRecord('theme', {});\n      assert.ok(model);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/routes/calculator-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | calculator', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:calculator');\n      assert.ok(route);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/routes/index-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define(\"ember-calculator/tests/unit/routes/theme-test\", [\"qunit\", \"ember-qunit\"], function (_qunit, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)('Unit | Route | theme', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:theme');\n      assert.ok(route);\n    });\n  });\n});","define('ember-calculator/config/environment', [], function() {\n  var prefix = 'ember-calculator';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('ember-calculator/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}